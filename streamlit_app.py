import streamlit as st
import requests
import os
import sys
from main import index_videos
import config

st.set_page_config(
    page_title="–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ",
    page_icon="üé¨",
    layout="wide"
)

if 'uploaded_files' not in st.session_state:
    st.session_state.uploaded_files = []
if 'file_uploader_key' not in st.session_state:
    st.session_state.file_uploader_key = 0

st.title("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤")

# API URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose
API_URL = os.getenv("API_URL", "http://localhost:8000")
tab1, tab2 = st.tabs(["–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ", "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ"])

# –í–∫–ª–∞–¥–∫–∞ 1: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
with tab1:

    st.header("–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ")
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")

    if st.button("–ò—Å–∫–∞—Ç—å", key="search_button") or query:
        if query:
            st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            
            response = requests.post(
                f"{API_URL}/search",
                json={"query": query, "limit": config.SEARCH_LIMIT}
            )
            
            if response.status_code == 200:
                search_results = response.json()

                if config.DEBUG_MODE:
                    with st.expander("–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞"):
                        st.code(response)
                        st.code(search_results)
                
                if search_results:
                    for i, result in enumerate(search_results):
                        col1, col2 = st.columns([1, 2])
                        
                        video_path = result.get('video_path', '')
                        video_name = result.get('video_name', f'–í–∏–¥–µ–æ #{i+1}')
                        preview_path = result.get('preview_path', '')
                        transcript = result.get('transcript', '')
                        score = result.get('score', 0)
                        
                        with col1:
                            if video_path:
                                # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /app, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                                if video_path.startswith('/app/'):
                                    video_file_path = video_path.replace('/app/', '')
                                else:
                                    video_file_path = video_path
                                
                                try:
                                    if os.path.exists(video_file_path):
                                        with open(video_file_path, 'rb') as video_file:
                                            video_bytes = video_file.read()
                                        st.video(video_bytes)
                                    else:
                                        st.warning(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {video_file_path}")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
                                    st.write(f"–ü—É—Ç–∏ –∫ –≤–∏–¥–µ–æ: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π={video_path}, –ª–æ–∫–∞–ª—å–Ω—ã–π={video_file_path}")
                            else:
                                st.warning("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                        with col2:
                            if config.DEBUG_MODE:
                                st.markdown(f"**{video_name}** (–†–∞–Ω–≥: {score:.2f})")
                            st.markdown(f"**{video_name}**")
                            if transcript:
                                max_length = 150
                                display_transcript = transcript[:max_length] + "..." if len(transcript) > max_length else transcript
                                if config.DEBUG_MODE:
                                    st.write(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {display_transcript}")
                        
                        st.markdown("---")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {response.status_code}")
        else:
            st.info("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ò—Å–∫–∞—Ç—å'.")

# –í–∫–ª–∞–¥–∫–∞ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
with tab2:
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–º.")
    
    with st.form("upload_form", clear_on_submit=True):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Docker
        upload_dir = os.path.join("/app", "video_examples_raw")
        videos_dir = os.path.join("/app", "video_examples")
        
        if not os.path.exists(upload_dir):
            os.makedirs(upload_dir)
        
        new_uploads = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã", 
                                        type=["mp4", "avi", "mov", "mkv", "webm"], 
                                        accept_multiple_files=True,
                                        key=f"file_uploader_{st.session_state.file_uploader_key}")
        submit_button = st.form_submit_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")
        
        if submit_button and new_uploads:
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            st.session_state.uploaded_files = new_uploads
            for i, uploaded_file in enumerate(new_uploads):
                progress = (i + 1) / len(new_uploads)
                progress_bar.progress(progress)
                status_text.text(f"–ó–∞–≥—Ä—É–∑–∫–∞ {i+1} –∏–∑ {len(new_uploads)}: {uploaded_file.name}")
                file_path = os.path.join(upload_dir, uploaded_file.name)
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
            
            status_text.text(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_uploads)} —Ñ–∞–π–ª–æ–≤")
            if config.DEBUG_MODE:
                st.success(f"–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {upload_dir}")
            
            st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file in os.listdir(upload_dir):
                st.write(f"- {file}")
        
        
    # –û–ø—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    st.subheader("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤–∏–¥–µ–æ")
       
    col1, col2 = st.columns(2)
    with col1:
        if config.DEBUG_MODE:
            force_reindex = st.checkbox("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è",
                                        value=False,
                                        help="–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            force_reindex = False

    with col2:
        delete_source = True
        
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é"):
        with st.spinner("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤–∏–¥–µ–æ..."):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ Streamlit
            import io
            from contextlib import redirect_stdout
            f = io.StringIO()
            with redirect_stdout(f):
                try:
                    index_videos(videos_dir, force_reindex)
                    success = True
                except Exception as e:
                    success = False
                    error_message = str(e)
            output = f.getvalue()
                    
            if success:
                st.success("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        
                if delete_source and os.path.exists(upload_dir):
                    deleted_count = 0
                    failed_count = 0
                            
                    for file in os.listdir(upload_dir):
                        source_path = os.path.join(upload_dir, file)
                        try:
                            os.remove(source_path)
                            deleted_count += 1
                        except Exception as e:
                            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file}: {str(e)}")
                            failed_count += 1
                            
                    if deleted_count > 0:
                        st.success(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                    if failed_count > 0:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {failed_count} —Ñ–∞–π–ª–æ–≤")
                        
                if config.DEBUG_MODE:
                    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"):
                        st.code(output)
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {error_message}")
                if config.DEBUG_MODE:
                    with st.expander("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"):
                        st.code(output)
                        st.code(error_message)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.title("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.")
    
    st.header("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    st.write('''–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ:
1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ENTER/–∫–æ–Ω–ø–∫—É "–ò—Å–∫–∞—Ç—å"
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏
3. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ''')
    st.write('''–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "Browse files" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
2. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã"
3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é" –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è "–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"''')